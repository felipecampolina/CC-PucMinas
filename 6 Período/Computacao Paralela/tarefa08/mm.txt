//Resultados
//Felipe Campolina , Henrique Diniz e Marcelo Reis
// Open mp:3.152000 segundos
// CUDA:  0.250345 segundos
//   Warps = 232 warps
// Warp Execution Efficiency = 60.00%

// Sequencial : 23.500000 


//CUDA
#include <stdio.h>
#include <stdlib.h>
#include <cuda.h>

// Kernel CUDA para multiplicação de matrizes
__global__ void mm_cuda(double* a, double* b, double* c, int width) 
{
  int row = blockIdx.y * blockDim.y + threadIdx.y;
  int col = blockIdx.x * blockDim.x + threadIdx.x;

  if (row < width && col < width) {
    double sum = 0;
    for (int k = 0; k < width; k++) {
      double x = a[row * width + k];
      double y = b[k * width + col];
      sum += x * y;
    }
    c[row * width + col] = sum;
  }
}

int main()
{
  int width = 2000;
  size_t size = width * width * sizeof(double);
  
  // Alocação de memória no host
  double *h_a = (double*) malloc(size);
  double *h_b = (double*) malloc(size);
  double *h_c = (double*) malloc(size);

  // Inicialização das matrizes
  for(int i = 0; i < width; i++) {
    for(int j = 0; j < width; j++) {
      h_a[i * width + j] = i;
      h_b[i * width + j] = j;
      h_c[i * width + j] = 0;
    }
  }

  // Alocação de memória no dispositivo
  double *d_a, *d_b, *d_c;
  cudaMalloc((void**)&d_a, size);
  cudaMalloc((void**)&d_b, size);
  cudaMalloc((void**)&d_c, size);

  // Cópia de dados do host para o dispositivo
  cudaMemcpy(d_a, h_a, size, cudaMemcpyHostToDevice);
  cudaMemcpy(d_b, h_b, size, cudaMemcpyHostToDevice);

  // Configuração da execução
  dim3 dimBlock(16, 16);
  dim3 dimGrid((width + dimBlock.x - 1) / dimBlock.x, (width + dimBlock.y - 1) / dimBlock.y);

  // Medir o tempo de execução
  cudaEvent_t start, stop;
  float cuda_time;
  cudaEventCreate(&start);
  cudaEventCreate(&stop);
  cudaEventRecord(start, 0);

  // Execução do kernel CUDA
  mm_cuda<<<dimGrid, dimBlock>>>(d_a, d_b, d_c, width);

  cudaEventRecord(stop, 0);
  cudaEventSynchronize(stop);
  cudaEventElapsedTime(&cuda_time, start, stop);
  printf("Tempo da versão CUDA: %f segundos\n", cuda_time / 1000);

  // Cópia do resultado do dispositivo para o host
  cudaMemcpy(h_c, d_c, size, cudaMemcpyDeviceToHost);

  // Liberação de memória no dispositivo
  cudaFree(d_a);
  cudaFree(d_b);
  cudaFree(d_c);

  // Liberação de memória no host
  free(h_a);
  free(h_b);
  free(h_c);

  return 0;
}


 // OPENMP


#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

// Função de multiplicação de matrizes com OpenMP
void mm_omp(double* a, double* b, double* c, int width) 
{
  #pragma omp parallel for collapse(2)
  for (int i = 0; i < width; i++) {
    for (int j = 0; j < width; j++) {
      double sum = 0;
      for (int k = 0; k < width; k++) {
        double x = a[i * width + k];
        double y = b[k * width + j];
        sum += x * y;
      }
      c[i * width + j] = sum;
    }
  }
}

int main()
{
  int width = 2000;
  size_t size = width * width * sizeof(double);
  
  // Alocação de memória no host
  double *h_a = (double*) malloc(size);
  double *h_b = (double*) malloc(size);
  double *h_c = (double*) malloc(size);

  // Inicialização das matrizes
  for(int i = 0; i < width; i++) {
    for(int j = 0; j < width; j++) {
      h_a[i * width + j] = i;
      h_b[i * width + j] = j;
      h_c[i * width + j] = 0;
    }
  }

  // Medir o tempo de execução
  double start_time, end_time;

  start_time = omp_get_wtime();
  mm_omp(h_a, h_b, h_c, width);
  end_time = omp_get_wtime();
  printf("Tempo da versão OpenMP: %f segundos\n", end_time - start_time);

  // Liberação de memória
  free(h_a);
  free(h_b);
  free(h_c);

  return 0;
}

// SEQUENCIAL 
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Função de multiplicação de matrizes sequencial
void mm_seq(double* a, double* b, double* c, int width) {
    for (int i = 0; i < width; i++) {
        for (int j = 0; j < width; j++) {
            double sum = 0;
            for (int k = 0; k < width; k++) {
                sum += a[i * width + k] * b[k * width + j];
            }
            c[i * width + j] = sum;
        }
    }
}

int main() {
    int width = 2000;
    size_t size = width * width * sizeof(double);

    // Alocação de memória para as matrizes
    double* a = (double*) malloc(size);
    double* b = (double*) malloc(size);
    double* c = (double*) malloc(size);

    // Inicialização das matrizes
    for (int i = 0; i < width; i++) {
        for (int j = 0; j < width; j++) {
            a[i * width + j] = i;
            b[i * width + j] = j;
            c[i * width + j] = 0;
        }
    }

    // Medir o tempo de execução da multiplicação sequencial
    clock_t start_time = clock();
    mm_seq(a, b, c, width);
    clock_t end_time = clock();

    double time_spent = (double)(end_time - start_time) / CLOCKS_PER_SEC;
    printf("Tempo da versão sequencial: %f segundos\n", time_spent);

    // Liberação da memória
    free(a);
    free(b);
    free(c);

    return 0;
}





